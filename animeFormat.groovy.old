{ norm = { it.replaceTrailingBrackets()
             .replaceAll(/[:|]/, " - ")
             .replaceAll(/[`´‘’ʻ""“”]/, "'")
             .replaceAll(/[*\s]+/, " ") }
  def transl = { it.transliterate("Any-Latin; NFD; NFC; Title") }
  def isLatin = { java.text.Normalizer.normalize(it, java.text.Normalizer.Form.NFD)
                      .replaceAll(/\p{InCombiningDiacriticalMarks}+/, "") ==~ /^\p{InBasicLatin}+$/ }
allOf
  {"Anime"}
  { norm(n) }
  { allOf
    // { norm(n) }
    { primaryTitle }
    // { isLatin(n) ? n.colon(" - ") : transl(n).colon(" - ") }
    { episode.special ? "S$special" : absolute.pad(2) }
    { allOf
      // { t.replacePart(replacement = ", Part $1") }
      // { isLatin(t) ? t.colon(" - ") : transl(t).colon(" - ") }
      { t.replaceAll(/[?]/, "").colon(", ") }
      {"PT $pi"}
      { allOf
        { allOf
          {"["}
          { allOf
            {[vf,vc].join(" ")}
            { allOf
              // Audio stream and language
              {[channels,ac].join(" ")}
              { def a = audioLanguages
                a.size() > 1 ? a.ISO3.join(", ").upperInitial() : a.name.first() }
              .join(" ") }
            {source}
            .join(" - ") }
          {"]"}
          .join("") }
        { def ed = fn.findAll(/(?i)repack|proper/)*.upper().join()
          if (ed) { return ".$ed" } }
        {"-$group"}
        {subt}
        .join("") }
      .join(" ") }
    .join(" - ") }
  .join("/") }
