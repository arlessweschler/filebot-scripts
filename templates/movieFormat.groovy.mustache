{ import net.filebot.Language
  import java.math.RoundingMode
  import groovy.json.JsonSlurper
  import groovy.json.JsonOutput

  def norm = { it.replaceTrailingBrackets()
                 // .upperInitial().lowerTrail()
                 .replaceAll(/[`´‘’ʻ""“”]/, "'")
                 .replaceAll(/[:|]/, " - ")
                 // .replaceAll(/[:]/, "\uFF1A")
                 // .replaceAll(/[:]/, "\u2236") // ratio
                 .replaceAll(/[?]/, "\uFE56")
                 .replaceAll(/[*\s]+/, " ")
                 .replaceAll(/\b[IiVvXx]+\b/, { it.upper() })
                 .replaceAll(/\b[0-9](?i:th|nd|rd)\b/, { it.lower() }) }

  def isLatin = { java.text.Normalizer.normalize(it, java.text.Normalizer.Form.NFD)
                                      .replaceAll(/\p{InCombiningDiacriticalMarks}+/, "") ==~ /^\p{InBasicLatin}+$/ }

  def translJap = {
    /* rate limited to 100 per day I believe, please be careful */
    def url = new URL("https://api.kuroshiro.org/convert")
    def requestHeaders = [:]
    def postBody = [:]
      postBody.str = it
      postBody.to = "romaji"
      postBody.mode = "spaced"
      postBody.romajiSystem = "hepburn"
    def postResponse = url.post(JsonOutput.toJson(postBody).getBytes("UTF-8"), "application/json", requestHeaders)
    def json = new JsonSlurper().parseText(postResponse.text)
    return json.result
  }

  def transl = {
    (languages.first().iso_639_2B == "jpn") ? translJap(it) : it.transliterate("Any-Latin; NFD; NFC; Title") }

allOf
  { if ((media.OverallBitRate.toInteger() / 1000 < 3000 && vf.minus("p").toInteger() >= 720)
       || vf.minus("p").toInteger() < 720) {
      return "LQ_Movies"
    } else {
      return "Movies"
    }
  }
  // Movie directory
  { def film_directors = info.directors.sort().join(", ")
    n.colon(" - ") + " ($y) [$film_directors]" }
  // File name
  { allOf
    { isLatin(primaryTitle) ? primaryTitle.colon(" - ") : transl(primaryTitle).colon(" - ") }
    {" ($y)"}
    // tags + a few more variants
    { def last = n.tokenize(" ").last()
      /* def _tags = (tags != null) ? tags : null */
      def _tags = call{tags}
      if (_tags) {
      	_tags.removeIf { it ==~ /(?i:imax)/ }
        _tags.removeIf{ a -> _tags.any{ b -> a != b && b.startsWith(a) } }
      }

      specials = { allOf
                    { _tags }
                    { fn.after(/(?i:$last)/).findAll(/(?i)(alternate|first)[ ._-]cut|limited|hybrid/)
                      *.upperInitial()*.lowerTrail()*.replaceAll(/[._-]/, " ") }
                    { fn.after(/(?i:$last)/).findAll(/(?i)imax.?(edition|version)?/)
                      *.upperInitial()*.lowerTrail()*.replaceAll(/[._-]/, " ")
                      *.replaceAll(/(?i:imax)/, "IMAX") }
                    .flatten().sort() }
      specials().size() > 0 ? specials().join(", ").replaceAll(/^/, " - ") : "" }
    {" PT $pi"}
    {" ["}
    { allOf
      // Video stream
      { allOf{vf}{vc}.join(" ") }
      {{> audio }}
      /* source */
      { // logo-free release source finder
        def file = new File("/scripts/websources.txt")
        def websources = file.exists() ? lines(file).join("|") : null
        def isWeb = (source ==~ /WEB.*/)
        // def isWeb = source.matches(/WEB.*/) don't know which one is preferrable
        def lfr = { if (isWeb) fn.match(/($websources)\.(?i)WEB/) }
        return allOf{fn.match(/(?i)(UHD).$source/).upper()}{lfr}{source}.join(".") }
      .join(" - ") }
    {"]"}
    { def ed = fn.findAll(/(?i)repack|proper/)*.upper().join(".")
      // def ed = allOf{fn.match(/repack|proper/)}{f.dir.path.match(/repack|proper/)}*.upper().join(".")
      if (ed) { ".$ed" } }
    /* { any{"-$group"}{"-" + fn.match(/(?:(?<=[-])\w+$)|(?:^\w+(?=[-]))/)} } */
    {"-$group"}
    {subt}
    .join("") }
  .join("/") }
